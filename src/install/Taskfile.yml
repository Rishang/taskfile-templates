version: "3"

tasks:
  distro:package:
    desc: Install packages for a given distro
    vars:
      CHECK_FOR: '{{.CHECK_FOR | default ""}}'
      UBUNTU_PACKAGES: '{{.UBUNTU_PACKAGES | default ""}}'
      FEDORA_PACKAGES: '{{.FEDORA_PACKAGES | default ""}}'
      ARCH_PACKAGES: '{{.ARCH_PACKAGES | default ""}}'
      ALPINE_PACKAGES: '{{.ALPINE_PACKAGES | default ""}}'
    cmds:
      - |
        
        # Check if any of the specified commands exist before installing packages
        if [ -n "{{.CHECK_FOR}}" ]; then
          CHECK_COMMANDS="{{.CHECK_FOR}}"
          FOUND=false
          
          # Split CHECK_FOR by comma and check each command (POSIX compatible)
          OLD_IFS="$IFS"
          IFS=','
          ALL_FOUND=true
          for cmd in $CHECK_COMMANDS; do
            IFS="$OLD_IFS"
            cmd=$(echo "$cmd" | xargs) # trim whitespace
            if which "$cmd" >/dev/null 2>&1; then
              echo "Found required command: $cmd"
            else
              echo "Missing required command: $cmd"
              ALL_FOUND=false
            fi
          done
          IFS="$OLD_IFS"
          
          if [ "$ALL_FOUND" = "true" ]; then
            echo "All required command(s) already found: $CHECK_COMMANDS"
            echo "Skipping package installation"
            exit 0
          else
            echo "Some commands are missing, proceeding with package installation"
          fi
        fi
        
        echo "Installing packages for {{.CHECK_FOR}}"
        # Install packages based on available package manager
        (
          which apt && export DEBIAN_FRONTEND=noninteractive && sudo apt-get update && sudo apt-get install -y --no-install-recommends {{.UBUNTU_PACKAGES}}
        ) || (
          which yum && sudo yum install -y --setopt=install_weak_deps=False {{.FEDORA_PACKAGES}}
        ) || (
          which dnf && sudo dnf install -y --setopt=install_weak_deps=False {{.ARCH_PACKAGES}}
        ) || (
          which apk && sudo apk add --no-cache --no-interactive {{.ALPINE_PACKAGES}}
        )
      - sudo rm -rf /tmp/* /var/tmp/* || true

  packages:common:
    desc: Install common packages for multiple distributions
    cmds:
      - task: distro:package
        vars:
          UBUNTU_PACKAGES: "sudo"
          FEDORA_PACKAGES: "sudo"
          ARCH_PACKAGES: "sudo"
          ALPINE_PACKAGES: "sudo"
      - task: distro:package
        vars:
          UBUNTU_PACKAGES: |
            build-essential curl wget git unzip jq vim zsh openssh-client tmux 
            file bash-completion dbus dnsutils nano sshpass net-tools tree fzf 
            gron ipcalc lsb-release ca-certificates
          FEDORA_PACKAGES: |
            gcc gcc-c++ make curl wget git unzip jq vim zsh openssh-clients 
            tmux file bash-completion dbus bind-utils nano
            sshpass net-tools tree fzf gron ipcalc redhat-lsb-core ca-certificates
          ARCH_PACKAGES: |
            base-devel curl wget git unzip jq vim zsh openssh tmux 
            file bash-completion dbus bind-tools nano sshpass
            net-tools tree fzf gron ipcalc lsb-release ca-certificates
          ALPINE_PACKAGES: |
            build-base curl wget git unzip jq vim zsh openssh-client 
            tmux file bash-completion dbus bind-tools nano sshpass
            net-tools tree fzf gron ipcalc ca-certificates
      
      - |
        # Clean package manager caches
        (which apt && sudo apt-get clean && sudo apt-get autoclean && sudo apt-get autoremove -y && sudo rm -rf /var/lib/apt/lists/*) || \
        (which yum && sudo yum clean all) || \
        (which dnf && sudo dnf clean all) || \
        (which pacman && sudo pacman -Sc --noconfirm) || \
        (which apk && sudo apk cache clean) || true
      - sudo rm -rf /tmp/* /var/tmp/* || true

  docker:
    desc: Install Docker
    cmds:
      - curl -fsSL https://get.docker.com/ | sudo sh
      - sudo usermod -aG docker $USER
      - sudo rm -rf /tmp/* /var/tmp/*
      - sudo docker system prune -f || true

  ohmyzsh:
    desc: Install Oh My Zsh
    vars:
      CHANGE_SHELL: '{{.CHANGE_SHELL | default "false"}}'
    cmds:
      - task: distro:package
        vars:
          UBUNTU_PACKAGES: "zsh curl git"
          FEDORA_PACKAGES: "zsh curl git"
          ARCH_PACKAGES: "zsh curl git"
          ALPINE_PACKAGES: "zsh curl git"
          CHECK_FOR: "zsh, curl, git"
      - RUNZSH=no CHSH=no sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      - sed -i 's/robbyrussell/kphoen/' ~/.zshrc
      - |
        if [ "{{.CHANGE_SHELL}}" = "true" ]; then
          echo "Changing default shell to zsh"
          chsh -s $(which zsh)
        else
          echo "Skipping changing default shell to zsh"
        fi
      - rm -rf /tmp/* /var/tmp/* || true

  aws:
    desc: Install AWS CLI v2
    vars:
      MAKE_DIR: '{{.MAKE_DIR | default "false"}}'
    cmds:
      - task: distro:package
        vars:
          UBUNTU_PACKAGES: "unzip"
          FEDORA_PACKAGES: "unzip"
          ARCH_PACKAGES: "unzip"
          ALPINE_PACKAGES: "unzip"
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - unzip awscliv2.zip
      - sudo ./aws/install
      - rm -rf awscliv2.zip aws
      - echo "complete -C '/usr/local/bin/aws_completer' aws" >> ~/.bashrc
      - |
        if [ -f ~/.zshrc ]; then
          echo "complete -C '/usr/local/bin/aws_completer' aws" >> ~/.zshrc
        else
          echo "Zsh configuration file not found, skipping completion setup for Zsh"
        fi
      - |
        if [ "{{.MAKE_DIR}}" = "true" ]; then
          mkdir -p ~/.aws
          touch ~/.aws/credentials
          touch ~/.aws/config
        else
          echo "Skipping creating ~/.aws directory"
        fi
      - rm -rf /tmp/* /var/tmp/* || true

  terraform:
    desc: Install Terraform
    requires:
      vars:
        - TERRAFORM_VERSION
    cmds:
      - task: distro:package
        vars:
          UBUNTU_PACKAGES: "wget unzip"
          FEDORA_PACKAGES: "wget unzip"
          ARCH_PACKAGES: "wget unzip"
          ALPINE_PACKAGES: "wget unzip"
      - wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - sudo install terraform /usr/local/bin/
      - rm -rf terraform*.zip terraform
      - echo "complete -C '/usr/local/bin/terraform' terraform" >> ~/.bashrc
      - echo "complete -C '/usr/local/bin/terraform' terraform" >> ~/.zshrc
      - rm -rf /tmp/* /var/tmp/* || true

  terragrunt:
    desc: Install Terragrunt
    requires:
      vars:
        - TERRAGRUNT_VERSION
    preconditions:
      - which terraform
    cmds:
      - task: distro:package
        vars:
          UBUNTU_PACKAGES: "wget"
          FEDORA_PACKAGES: "wget"
          ARCH_PACKAGES: "wget"
          ALPINE_PACKAGES: "wget"
      - wget https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64
      - sudo install terragrunt_linux_amd64 /usr/bin/terragrunt
      - rm -rf terragrunt_linux_amd64
      - echo "complete -C '/usr/bin/terragrunt' terragrunt" >> ~/.bashrc
      - echo "complete -C '/usr/bin/terragrunt' terragrunt" >> ~/.zshrc
      - rm -rf /tmp/* /var/tmp/* || true

  tfswitch:
    desc: Install tfswitch
    vars:
      PATH: '{{.PATH | default "~/.local/bin"}}'
    cmds:
      - |
        echo "Installing tfswitch"
        (tfswitch --version || (curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/master/install.sh | sudo bash) && tfswitch --version)

        echo "Installing terraform"
        mkdir -p ~/.local/bin
        (which terraform && rm $(which terraform))
        tfswitch

        # use sudo if PATH starts with `/`
        if [[ {{.PATH}} == /* ]]; then
          sudo mv ~/bin/terraform {{.PATH}}/
        else
          mv ~/bin/terraform {{.PATH}}/
        fi
        terraform --version
      - rm -rf /tmp/* /var/tmp/* || true
      - rm -rf ~/bin || true

  tgswitch:
    desc: Install tgswitch
    vars:
      PATH: '{{.PATH | default "~/.local/bin"}}'
    cmds:
      - |
        echo "Installing tgswitch"
        (tgswitch --version || (curl -L https://raw.githubusercontent.com/warrensbox/tgswitch/release/install.sh | sudo bash) && tgswitch --version)

        echo "Installing terragrunt"
        mkdir -p ~/.local/bin
        (which terragrunt && rm $(which terragrunt))
        tgswitch

        # use sudo if PATH starts with `/`
        if [[ {{.PATH}} == /* ]]; then
          sudo mv ~/bin/terragrunt {{.PATH}}/
        else
          mv ~/bin/terragrunt {{.PATH}}/
        fi
        terragrunt --version
      - rm -rf /tmp/* /var/tmp/* || true
      - rm -rf ~/bin || true

  ansible:
    desc: Install Ansible dependencies
    cmds:
      - task: distro:package
        vars:
          UBUNTU_PACKAGES: "ansible"
          FEDORA_PACKAGES: "ansible"
          ARCH_PACKAGES: "ansible"
          ALPINE_PACKAGES: "ansible"
      - |
        # Clean package manager caches
        (which apt && sudo apt-get clean && sudo apt-get autoclean && sudo rm -rf /var/lib/apt/lists/*) || \
        (which yum && sudo yum clean all) || \
        (which dnf && sudo dnf clean all) || \
        (which pacman && sudo pacman -Sc --noconfirm) || true
      - rm -rf /tmp/* /var/tmp/* || true

  kubectl:
    desc: Install kubectl
    requires:
      vars:
        - KUBECTL_VERSION
    cmds:
      - curl -LO https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl
      - sudo install kubectl /usr/local/bin/
      - rm -rf kubectl
      - rm -rf /tmp/* /var/tmp/* || true

  helm:
    desc: Install Helm
    cmds:
      - curl -s https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      - rm -rf /tmp/* /var/tmp/* || true
      - rm -rf ~/get_helm.sh || true

  k9s:
    desc: Install k9s
    cmds:
      - curl -sS https://webi.sh/k9s | sh
      - rm -rf /tmp/* /var/tmp/* || true
      - rm -rf ~/.local/opt/webi || true

  python:
    desc: Install Python
    cmds:
      - task: distro:package
        vars:
          UBUNTU_PACKAGES: "python3 python3-pip"
          FEDORA_PACKAGES: "python3 python3-pip"
          ARCH_PACKAGES: "python3 python3-pip"
          ALPINE_PACKAGES: "python3 py3-pip"
      - python3 --version && pip3 --version
      - |
        # Clean package manager caches
        (which apt && sudo apt-get clean && sudo apt-get autoclean && sudo rm -rf /var/lib/apt/lists/*) || \
        (which yum && sudo yum clean all) || \
        (which dnf && sudo dnf clean all) || \
        (which pacman && sudo pacman -Sc --noconfirm) || \
        (which apk && sudo apk cache clean) || true
      - |
        # Clean pip cache
        pip3 cache purge || true
        python3 -m pip cache purge || true
      - rm -rf /tmp/* /var/tmp/* || true
      - rm -rf ~/.cache/pip || true
  webi:
    desc: "Install package via webi (eg: python@3.13)"
    requires:
      vars:
        - PACKAGE
    cmds:
      - curl -fsSL https://webi.sh/{{.PACKAGE}} | bash

  vscode_server:
    desc: Install code-server (VS Code in the browser)
    vars:
      VERSION: '{{.VERSION | default "latest"}}'
      ARCH: '{{.ARCH | default "auto"}}'
      INSTALL_DIR: '{{.INSTALL_DIR | default "/usr/local/lib/code-server"}}'
      BIN_DIR: '{{.BIN_DIR | default "/usr/local/bin"}}'
      DATA_DIR: '{{.DATA_DIR | default "~/.local/share/code-server"}}'
      EXTENSIONS_DIR: '{{.EXTENSIONS_DIR | default "~/.local/share/code-server/extensions"}}'
      USER_DATA_DIR: '{{.USER_DATA_DIR | default "~/.local/share/code-server/User"}}'
    cmds:
      - task: distro:package
        vars:
          UBUNTU_PACKAGES: "curl wget unzip"
          FEDORA_PACKAGES: "curl wget unzip"
          ARCH_PACKAGES: "curl wget unzip"
          ALPINE_PACKAGES: "curl wget unzip"
      - |
        echo "Installing code-server version: {{.VERSION}}"
        
        # Get the latest version if not specified
        if [ "{{.VERSION}}" = "latest" ]; then
          VERSION=$(curl -s https://api.github.com/repos/coder/code-server/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Latest version: $VERSION"
        else
          VERSION="{{.VERSION}}"
        fi
        
        # Detect architecture if auto
        if [ "{{.ARCH}}" = "auto" ]; then
          ARCH=$(uname -m)
          case $ARCH in
            x86_64) ARCH="amd64" ;;
            aarch64|arm64) ARCH="arm64" ;;
            armv7l) ARCH="armv7l" ;;
            *) echo "Unsupported architecture: $ARCH"; exit 1 ;;
          esac
        else
          ARCH="{{.ARCH}}"
        fi
        
        echo "Detected architecture: $ARCH"
        
        # Download code-server based on architecture
        DOWNLOAD_URL="https://github.com/coder/coder/code-server/releases/download/${VERSION}/code-server-${VERSION}-linux-${ARCH}.tar.gz"
        echo "Downloading from: $DOWNLOAD_URL"
        
        # Create temporary directory
        TEMP_DIR=$(mktemp -d)
        cd "$TEMP_DIR"
        
        # Download and extract
        if curl -L "$DOWNLOAD_URL" -o code-server.tar.gz; then
          echo "Download successful"
        else
          echo "Error: Failed to download code-server"
          echo "Trying alternative download method..."
          # Try alternative URL pattern
          ALT_URL="https://github.com/coder/code-server/releases/download/${VERSION}/code-server-${VERSION}-linux-${ARCH}.tar.gz"
          if curl -L "$ALT_URL" -o code-server.tar.gz; then
            echo "Alternative download successful"
          else
            echo "Error: Failed to download from both URLs"
            echo "Available architectures: amd64, arm64, armv7l"
            exit 1
          fi
        fi
        
        tar -xzf code-server.tar.gz
        
        # Find the extracted directory
        EXTRACTED_DIR=$(find . -maxdepth 1 -type d -name "code-server-*" | head -1)
        
        if [ -z "$EXTRACTED_DIR" ]; then
          echo "Error: Could not find extracted code-server directory"
          exit 1
        fi
        
        # Install code-server
        sudo mkdir -p {{.INSTALL_DIR}}
        sudo cp -r "$EXTRACTED_DIR"/* {{.INSTALL_DIR}}/
        sudo ln -sf {{.INSTALL_DIR}}/bin/code-server {{.BIN_DIR}}/code-server
        
        # Create data directories
        mkdir -p {{.DATA_DIR}}
        mkdir -p {{.EXTENSIONS_DIR}}
        mkdir -p {{.USER_DATA_DIR}}
        
        # Set permissions
        sudo chmod +x {{.BIN_DIR}}/code-server
        sudo chmod +x {{.INSTALL_DIR}}/bin/code-server
        
        # Clean up
        cd /
        rm -rf "$TEMP_DIR"
        
        # Verify installation
        code-server --version
        
        echo "code-server installed successfully!"
        echo "Version: $VERSION"
        echo "Architecture: $ARCH"
        echo "Installation directory: {{.INSTALL_DIR}}"
        echo "Binary location: {{.BIN_DIR}}/code-server"
        echo "Data directory: {{.DATA_DIR}}"
        echo ""
        echo "To start code-server:"
        echo "  code-server --bind-addr 0.0.0.0:8080"
        echo ""
        echo "To start with authentication:"
        echo "  code-server --bind-addr 0.0.0.0:8080 --auth password"
      - rm -rf /tmp/* /var/tmp/* || true

  rc_paths:
    desc: Add rc paths to bashrc and zshrc
    cmds:
      - |
        if [ -f ~/.config/envman/PATH.env ]; then
          if [ -f ~/.bashrc ]; then
            cat ~/.bashrc | grep -q "envman/PATH.env" || echo "source $HOME/.config/envman/PATH.env" >> ~/.bashrc
          fi
          if [ -f ~/.zshrc ]; then
            cat ~/.zshrc | grep -q "envman/PATH.env" || echo "source $HOME/.config/envman/PATH.env" >> ~/.zshrc
          fi
        else
          echo "envman is not installed"
        fi
      - rm -rf /tmp/* /var/tmp/* || true
