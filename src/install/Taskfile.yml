version: "3"

tasks:
  install:ubuntu:common:
    desc: Install common packages for Ubuntu
    cmds:
      - which sudo || apt-get update && apt-get install -y sudo
      - sudo apt-get update
      - sudo apt-get install -y --no-install-recommends \
          build-essential \
          curl \
          wget \
          git \
          unzip \
          jq \
          vim \
          zsh \
          openssh-client \
          tmux \
          file \
          bash-completion \
          dbus \
          dnsutils \
          nano \
          sshpass \
          net-tools \
          tree \
          fzf \
          gron \
          ipcalc \
          lsb-release \
          ca-certificates
      - sudo apt-get clean
      - sudo apt-get autoclean
      - sudo apt-get autoremove -y
      - sudo rm -rf /var/lib/apt/lists/*
      - sudo rm -rf /tmp/* /var/tmp/*

  install:docker:
    desc: Install Docker
    cmds:
      - curl -fsSL https://get.docker.com/ | sudo sh
      - sudo usermod -aG docker $USER
      - sudo rm -rf /tmp/* /var/tmp/*
      - sudo docker system prune -f || true

  install:ohmyzsh:
    desc: Install Oh My Zsh
    vars:
      CHANGE_SHELL: "{{ default false .CHANGE_SHELL }}"
    cmds:
      - RUNZSH=no CHSH=no sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      - sed -i 's/robbyrussell/kphoen/' ~/.zshrc
      - |
        if [ "{{.CHANGE_SHELL}}" = "true" ]; then
          echo "Changing default shell to zsh"
          chsh -s $(which zsh)
        else
          echo "Skipping changing default shell to zsh"
        fi
      - rm -rf /tmp/* /var/tmp/* || true

  install:aws:
    desc: Install AWS CLI v2
    vars:
      MAKE_DIR: "{{ default false .MAKE_DIR }}"
    cmds:
      - |
        (
          which unzip || (which apt && sudo apt-get update && sudo apt-get install -y unzip) || (which yum && sudo yum install -y unzip) || (which dnf && sudo dnf install -y unzip) || (which pacman && sudo pacman -S --noconfirm unzip) || (which apk && sudo apk add --no-interactive unzip)
        )
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - unzip awscliv2.zip
      - sudo ./aws/install
      - rm -rf awscliv2.zip aws
      - echo "complete -C '/usr/local/bin/aws_completer' aws" >> ~/.bashrc
      - |
        if [ -f ~/.zshrc ]; then
          echo "complete -C '/usr/local/bin/aws_completer' aws" >> ~/.zshrc
        else
          echo "Zsh configuration file not found, skipping completion setup for Zsh"
        fi
      - |
        if [ "{{.MAKE_DIR}}" = "true" ]; then
          mkdir -p ~/.aws
          touch ~/.aws/credentials
          touch ~/.aws/config
        else
          echo "Skipping creating ~/.aws directory"
        fi
      - rm -rf /tmp/* /var/tmp/* || true

  install:terraform:
    desc: Install Terraform
    requires:
      vars:
        - TERRAFORM_VERSION
    cmds:
      - wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - sudo install terraform /usr/local/bin/
      - rm -rf terraform*.zip terraform
      - echo "complete -C '/usr/local/bin/terraform' terraform" >> ~/.bashrc
      - echo "complete -C '/usr/local/bin/terraform' terraform" >> ~/.zshrc
      - rm -rf /tmp/* /var/tmp/* || true

  install:terragrunt:
    desc: Install Terragrunt
    requires:
      vars:
        - TERRAGRUNT_VERSION
    preconditions:
      - which terraform
    cmds:
      - wget https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64
      - sudo install terragrunt_linux_amd64 /usr/bin/terragrunt
      - rm -rf terragrunt_linux_amd64
      - echo "complete -C '/usr/bin/terragrunt' terragrunt" >> ~/.bashrc
      - echo "complete -C '/usr/bin/terragrunt' terragrunt" >> ~/.zshrc
      - rm -rf /tmp/* /var/tmp/* || true

  install:tfswitch:
    desc: Install tfswitch
    vars:
      PATH: "{{ default .PATH ~/.local/bin }}"
    cmds:
      - |
        echo "Installing tfswitch"
        (tfswitch --version || (curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/master/install.sh | sudo bash) && tfswitch --version)

        echo "Installing terraform"
        mkdir -p ~/.local/bin
        (which terraform && rm $(which terraform))
        tfswitch

        # use sudo if PATH starts with `/`
        if [[ {{.PATH}} == /* ]]; then
          sudo mv ~/bin/terraform {{.PATH}}/
        else
          mv ~/bin/terraform {{.PATH}}/
        fi
        terraform --version
      - rm -rf /tmp/* /var/tmp/* || true
      - rm -rf ~/bin || true

  install:tgswitch:
    desc: Install tgswitch
    vars:
      PATH: "{{ default .PATH ~/.local/bin }}"
    cmds:
      - |
        echo "Installing tgswitch"
        (tgswitch --version || (curl -L https://raw.githubusercontent.com/warrensbox/tgswitch/release/install.sh | sudo bash) && tgswitch --version)

        echo "Installing terragrunt"
        mkdir -p ~/.local/bin
        (which terragrunt && rm $(which terragrunt))
        tgswitch

        # use sudo if PATH starts with `/`
        if [[ {{.PATH}} == /* ]]; then
          sudo mv ~/bin/terragrunt {{.PATH}}/
        else
          mv ~/bin/terragrunt {{.PATH}}/
        fi
        terragrunt --version
      - rm -rf /tmp/* /var/tmp/* || true
      - rm -rf ~/bin || true

  install:ansible:
    desc: Install Ansible dependencies
    cmds:
      - |
        (
          which ansible-playbook || (
            which apt && sudo apt update && sudo apt install -y ansible
          ) || (
            which yum && sudo yum install -y ansible
          ) || (
            which dnf && sudo dnf install -y ansible
          ) || (
            which pacman && sudo pacman -S --noconfirm ansible
          )
        )
      - |
        # Clean package manager caches
        (which apt && sudo apt-get clean && sudo apt-get autoclean && sudo rm -rf /var/lib/apt/lists/*) || \
        (which yum && sudo yum clean all) || \
        (which dnf && sudo dnf clean all) || \
        (which pacman && sudo pacman -Sc --noconfirm) || true
      - rm -rf /tmp/* /var/tmp/* || true

  install:kubectl:
    desc: Install kubectl
    requires:
      vars:
        - KUBECTL_VERSION
    cmds:
      - curl -LO https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl
      - sudo install kubectl /usr/local/bin/
      - rm -rf kubectl
      - rm -rf /tmp/* /var/tmp/* || true

  install:helm:
    desc: Install Helm
    cmds:
      - curl -s https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      - rm -rf /tmp/* /var/tmp/* || true
      - rm -rf ~/get_helm.sh || true

  install:k9s:
    desc: Install k9s
    cmds:
      - curl -sS https://webi.sh/k9s | sh
      - rm -rf /tmp/* /var/tmp/* || true
      - rm -rf ~/.local/opt/webi || true

  install:python:
    desc: Install Python
    cmds:
      - |
        (
          which python3 && which pip3 && echo "Python3 and pip3 are already installed"
        ) || (
          which apt && sudo apt update && DEBIAN_FRONTEND=noninteractive sudo apt install -y python3 python3-pip
        ) || (
          which yum && sudo yum install -y python3 python3-pip
        ) || (
          which dnf && sudo dnf install -y python3 python3-pip
        ) || (
          which pacman && sudo pacman -S --noconfirm python python-pip
        ) || (
          which brew && brew install python
        ) || (
          which apk && sudo apk add --no-interactive python3 py3-pip
        )
        
        # Verify installation
        python3 --version && pip3 --version
      - |
        # Clean package manager caches
        (which apt && sudo apt-get clean && sudo apt-get autoclean && sudo rm -rf /var/lib/apt/lists/*) || \
        (which yum && sudo yum clean all) || \
        (which dnf && sudo dnf clean all) || \
        (which pacman && sudo pacman -Sc --noconfirm) || \
        (which apk && sudo apk cache clean) || true
      - |
        # Clean pip cache
        pip3 cache purge || true
        python3 -m pip cache purge || true
      - rm -rf /tmp/* /var/tmp/* || true
      - rm -rf ~/.cache/pip || true

  install:rc_paths:
    desc: Add rc paths to bashrc and zshrc
    cmds:
      - |
        if [ -f ~/.config/envman/PATH.env ]; then
          if [ -f ~/.bashrc ]; then
            cat ~/.bashrc | grep -q "envman/PATH.env" || echo "source $HOME/.config/envman/PATH.env" >> ~/.bashrc
          fi
          if [ -f ~/.zshrc ]; then
            cat ~/.zshrc | grep -q "envman/PATH.env" || echo "source $HOME/.config/envman/PATH.env" >> ~/.zshrc
          fi
        else
          echo "envman is not installed"
        fi
      - rm -rf /tmp/* /var/tmp/* || true
