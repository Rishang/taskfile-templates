version: "3"

tasks:
  distro:package:
    desc: Install packages for a given distro
    vars:
      CHECK_FOR: '{{.CHECK_FOR | default ""}}'
      UBUNTU_PACKAGES: '{{.UBUNTU_PACKAGES | default ""}}'
      FEDORA_PACKAGES: '{{.FEDORA_PACKAGES | default ""}}'
      ARCH_PACKAGES: '{{.ARCH_PACKAGES | default ""}}'
      ALPINE_PACKAGES: '{{.ALPINE_PACKAGES | default ""}}'
    cmds:
      - |
        echo "Installing packages for {{.CHECK_FOR}}"
        
        # Check if any of the specified commands exist before installing packages
        if [ -n "{{.CHECK_FOR}}" ]; then
          CHECK_COMMANDS="{{.CHECK_FOR}}"
          FOUND=false
          
          # Split CHECK_FOR by comma and check each command
          IFS=',' read -ra COMMANDS <<< "$CHECK_COMMANDS"
          for cmd in "${COMMANDS[@]}"; do
            cmd=$(echo "$cmd" | xargs) # trim whitespace
            if which "$cmd" >/dev/null 2>&1; then
              echo "Found required command: $cmd"
              FOUND=true
              break
            fi
          done
          
          if [ "$FOUND" = "false" ]; then
            echo "None of the required commands found: $CHECK_COMMANDS"
            echo "Skipping package installation"
            exit 0
          fi
        fi
        
        # Install packages based on available package manager
        (
          which apt && sudo apt-get update && sudo apt-get install -y --no-install-recommends {{.UBUNTU_PACKAGES}}
        ) || (
          which yum && sudo yum install -y --setopt=install_weak_deps=False {{.FEDORA_PACKAGES}}
        ) || (
          which dnf && sudo dnf install -y --setopt=install_weak_deps=False {{.ARCH_PACKAGES}}
        ) || (
          which apk && sudo apk add --no-cache --no-interactive {{.ALPINE_PACKAGES}}
        )
      - sudo rm -rf /tmp/* /var/tmp/* || true

  ubuntu:common:
    desc: Install common packages for Ubuntu
    cmds:
      - which sudo || apt-get update && apt-get install -y sudo
      - sudo apt-get update
      - |
        sudo apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        wget \
        git \
        unzip \
        jq \
        vim \
        zsh \
        openssh-client \
        tmux \
        file \
        bash-completion \
        dbus \
        dnsutils \
        nano \
        sshpass \
        net-tools \
        tree \
        fzf \
        gron \
        ipcalc \
        lsb-release \
        ca-certificates
      - sudo apt-get clean
      - sudo apt-get autoclean
      - sudo apt-get autoremove -y
      - sudo rm -rf /var/lib/apt/lists/*
      - sudo rm -rf /tmp/* /var/tmp/*

  docker:
    desc: Install Docker
    cmds:
      - curl -fsSL https://get.docker.com/ | sudo sh
      - sudo usermod -aG docker $USER
      - sudo rm -rf /tmp/* /var/tmp/*
      - sudo docker system prune -f || true

  ohmyzsh:
    desc: Install Oh My Zsh
    vars:
      CHANGE_SHELL: '{{.CHANGE_SHELL | default "false"}}'
    cmds:
      - task: distro:package
        vars:
          UBUNTU_PACKAGES: "zsh"
          FEDORA_PACKAGES: "zsh"
          ARCH_PACKAGES: "zsh"
          ALPINE_PACKAGES: "zsh"
      - RUNZSH=no CHSH=no sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      - sed -i 's/robbyrussell/kphoen/' ~/.zshrc
      - |
        if [ "{{.CHANGE_SHELL}}" = "true" ]; then
          echo "Changing default shell to zsh"
          chsh -s $(which zsh)
        else
          echo "Skipping changing default shell to zsh"
        fi
      - rm -rf /tmp/* /var/tmp/* || true

  aws:
    desc: Install AWS CLI v2
    vars:
      MAKE_DIR: '{{.MAKE_DIR | default "false"}}'
    cmds:
      - task: distro:package
        vars:
          UBUNTU_PACKAGES: "unzip"
          FEDORA_PACKAGES: "unzip"
          ARCH_PACKAGES: "unzip"
          ALPINE_PACKAGES: "unzip"
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - unzip awscliv2.zip
      - sudo ./aws/install
      - rm -rf awscliv2.zip aws
      - echo "complete -C '/usr/local/bin/aws_completer' aws" >> ~/.bashrc
      - |
        if [ -f ~/.zshrc ]; then
          echo "complete -C '/usr/local/bin/aws_completer' aws" >> ~/.zshrc
        else
          echo "Zsh configuration file not found, skipping completion setup for Zsh"
        fi
      - |
        if [ "{{.MAKE_DIR}}" = "true" ]; then
          mkdir -p ~/.aws
          touch ~/.aws/credentials
          touch ~/.aws/config
        else
          echo "Skipping creating ~/.aws directory"
        fi
      - rm -rf /tmp/* /var/tmp/* || true

  terraform:
    desc: Install Terraform
    requires:
      vars:
        - TERRAFORM_VERSION
    cmds:
      - task: distro:package
        vars:
          UBUNTU_PACKAGES: "wget unzip"
          FEDORA_PACKAGES: "wget unzip"
          ARCH_PACKAGES: "wget unzip"
          ALPINE_PACKAGES: "wget unzip"
      - wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - sudo install terraform /usr/local/bin/
      - rm -rf terraform*.zip terraform
      - echo "complete -C '/usr/local/bin/terraform' terraform" >> ~/.bashrc
      - echo "complete -C '/usr/local/bin/terraform' terraform" >> ~/.zshrc
      - rm -rf /tmp/* /var/tmp/* || true

  terragrunt:
    desc: Install Terragrunt
    requires:
      vars:
        - TERRAGRUNT_VERSION
    preconditions:
      - which terraform
    cmds:
      - task: distro:package
        vars:
          UBUNTU_PACKAGES: "wget"
          FEDORA_PACKAGES: "wget"
          ARCH_PACKAGES: "wget"
          ALPINE_PACKAGES: "wget"
      - wget https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64
      - sudo install terragrunt_linux_amd64 /usr/bin/terragrunt
      - rm -rf terragrunt_linux_amd64
      - echo "complete -C '/usr/bin/terragrunt' terragrunt" >> ~/.bashrc
      - echo "complete -C '/usr/bin/terragrunt' terragrunt" >> ~/.zshrc
      - rm -rf /tmp/* /var/tmp/* || true

  tfswitch:
    desc: Install tfswitch
    vars:
      PATH: '{{.PATH | default "~/.local/bin"}}'
    cmds:
      - |
        echo "Installing tfswitch"
        (tfswitch --version || (curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/master/install.sh | sudo bash) && tfswitch --version)

        echo "Installing terraform"
        mkdir -p ~/.local/bin
        (which terraform && rm $(which terraform))
        tfswitch

        # use sudo if PATH starts with `/`
        if [[ {{.PATH}} == /* ]]; then
          sudo mv ~/bin/terraform {{.PATH}}/
        else
          mv ~/bin/terraform {{.PATH}}/
        fi
        terraform --version
      - rm -rf /tmp/* /var/tmp/* || true
      - rm -rf ~/bin || true

  tgswitch:
    desc: Install tgswitch
    vars:
      PATH: '{{.PATH | default "~/.local/bin"}}'
    cmds:
      - |
        echo "Installing tgswitch"
        (tgswitch --version || (curl -L https://raw.githubusercontent.com/warrensbox/tgswitch/release/install.sh | sudo bash) && tgswitch --version)

        echo "Installing terragrunt"
        mkdir -p ~/.local/bin
        (which terragrunt && rm $(which terragrunt))
        tgswitch

        # use sudo if PATH starts with `/`
        if [[ {{.PATH}} == /* ]]; then
          sudo mv ~/bin/terragrunt {{.PATH}}/
        else
          mv ~/bin/terragrunt {{.PATH}}/
        fi
        terragrunt --version
      - rm -rf /tmp/* /var/tmp/* || true
      - rm -rf ~/bin || true

  ansible:
    desc: Install Ansible dependencies
    cmds:
      - task: distro:package
        vars:
          UBUNTU_PACKAGES: "ansible"
          FEDORA_PACKAGES: "ansible"
          ARCH_PACKAGES: "ansible"
          ALPINE_PACKAGES: "ansible"
      - |
        # Clean package manager caches
        (which apt && sudo apt-get clean && sudo apt-get autoclean && sudo rm -rf /var/lib/apt/lists/*) || \
        (which yum && sudo yum clean all) || \
        (which dnf && sudo dnf clean all) || \
        (which pacman && sudo pacman -Sc --noconfirm) || true
      - rm -rf /tmp/* /var/tmp/* || true

  kubectl:
    desc: Install kubectl
    requires:
      vars:
        - KUBECTL_VERSION
    cmds:
      - curl -LO https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl
      - sudo install kubectl /usr/local/bin/
      - rm -rf kubectl
      - rm -rf /tmp/* /var/tmp/* || true

  helm:
    desc: Install Helm
    cmds:
      - curl -s https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      - rm -rf /tmp/* /var/tmp/* || true
      - rm -rf ~/get_helm.sh || true

  k9s:
    desc: Install k9s
    cmds:
      - curl -sS https://webi.sh/k9s | sh
      - rm -rf /tmp/* /var/tmp/* || true
      - rm -rf ~/.local/opt/webi || true

  python:
    desc: Install Python
    cmds:
      - task: distro:package
        vars:
          UBUNTU_PACKAGES: "python3 python3-pip"
          FEDORA_PACKAGES: "python3 python3-pip"
          ARCH_PACKAGES: "python3 python3-pip"
          ALPINE_PACKAGES: "python3 py3-pip"
      - python3 --version && pip3 --version
      - |
        # Clean package manager caches
        (which apt && sudo apt-get clean && sudo apt-get autoclean && sudo rm -rf /var/lib/apt/lists/*) || \
        (which yum && sudo yum clean all) || \
        (which dnf && sudo dnf clean all) || \
        (which pacman && sudo pacman -Sc --noconfirm) || \
        (which apk && sudo apk cache clean) || true
      - |
        # Clean pip cache
        pip3 cache purge || true
        python3 -m pip cache purge || true
      - rm -rf /tmp/* /var/tmp/* || true
      - rm -rf ~/.cache/pip || true
  webi:
    desc: "Install package via webi (eg: python@3.13)"
    requires:
      vars:
        - PACKAGE
    cmds:
      - curl -fsSL https://webi.sh/{{.PACKAGE}} | bash

  vscode_server:
  rc_paths:
    desc: Add rc paths to bashrc and zshrc
    cmds:
      - |
        if [ -f ~/.config/envman/PATH.env ]; then
          if [ -f ~/.bashrc ]; then
            cat ~/.bashrc | grep -q "envman/PATH.env" || echo "source $HOME/.config/envman/PATH.env" >> ~/.bashrc
          fi
          if [ -f ~/.zshrc ]; then
            cat ~/.zshrc | grep -q "envman/PATH.env" || echo "source $HOME/.config/envman/PATH.env" >> ~/.zshrc
          fi
        else
          echo "envman is not installed"
        fi
      - rm -rf /tmp/* /var/tmp/* || true
